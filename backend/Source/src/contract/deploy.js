/**
 * Script to deploy a contract to the Ethereum blockchain
 */

/**
 * path libraries from NodeJS: Computes the path
 */
const path = require('path');

/**
 * file system library from NodeJS: Reading/Writing files (...)
 */
const fs = require('fs');

/**
 * library to access .env files - depending on the mode of the app: .env.dev or .env.prod
 */
require('dotenv').config();

/**
 * We need an instance of this class to pass the login data to the [[Web3]] library
 */
const HDWalletProvider = require('truffle-hdwallet-provider');

/**
 * the Web3 library helps connecting to the Ethereum network
 */
const Web3 = require('web3');

/**
 * small helper to read the content of a file (syncronously)
 * @param relativePath the relative path to the file we want to read
 * @returns the content of the file as a string
 */
function readFile(relativePath) {
  const sourcePath = path.resolve(__dirname, relativePath);
  return fs.readFileSync(sourcePath, 'utf8');
}

/**
 * contains the generated interface of our contract
 */
const interface = readFile('./Document.api.json');

/**
 * contains the generated bytecode of our contract
 */
const bytecode = readFile('./Document.bytecode');

console.log('interface vorhanden? ', !!interface);
console.log('bytecode vorhanden?  ', !!bytecode);
console.log('MEMONIC vorhanden?   ', !!process.env.MEMONIC);
console.log('INFURA_URL vorhanden?', !!process.env.INFURA_URL);

/**
 * the "provider" (comparable to a login) to our Ethereum account
 */
const provider = new HDWalletProvider(
  process.env.MEMONIC,
  process.env.INFURA_URL,
);

/**
 * the instance if the [[Web]] class is the bridge from our code to the Ethereum network
 */
const web3 = new Web3(provider);

/**
 * Create a smart contract and deploy it to the blockchain (async)
 * @param hashedData the (hashed) data that should be stored the contract
 * @param arrayOfLinks a list of linked contract adresses (could be empty)
 */
export async function deploy(hashedData, arrayOfLinks) {
  const accounts = await web3.eth.getAccounts();

  console.log('Attempting to deploy from account', accounts[0]);

  const result = await new web3.eth.Contract(JSON.parse(interface))
    .deploy({
      data: bytecode,
      arguments: [hashedData, arrayOfLinks || []],
    })
    .send({
      gas: '1000000',
      from: accounts[0],
    });

  console.log('Contract deployed to', result.options.address);
}
